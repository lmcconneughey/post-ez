generator client {
  provider = "prisma-client-js"
  //output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id
  email                   String                    @unique()
  userName                String                    @unique()
  displayName             String?
  img                     String?
  cover                   String?
  bio                     String?
  location                String?
  job                     String?
  website                 String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  Post                    Post[]
  Like                    Like[]
  SavedPost               SavedPost[]
  followers               Follow[]                  @relation("UserFollowers")
  following               Follow[]                  @relation("UserFollowing")
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
}

model Post {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  desc          String?
  img           String?
  imgHeight     Int?
  imgWidth      Int?
  video         String?
  isSensitive   Boolean     @default(false)
  transformType String?
  userId        String
  repostId      String?     @db.Uuid
  repost        Post?       @relation("Reposts", fields: [repostId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  reposts       Post[]      @relation("Reposts")
  parentPostId  String?     @db.Uuid
  parentPost    Post?       @relation("PostComments", fields: [parentPostId], references: [id])
  comments      Post[]      @relation("PostComments")
  Like          Like[]
  SavedPost     SavedPost[]
}

model Like {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  userId    String
  postId    String   @db.Uuid // FIX: Added @db.Uuid here
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model SavedPost {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  userId    String
  postId    String   @db.Uuid // FIX: Added @db.Uuid here
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])
}

// messaging schema
model Conversation {
  id           String                    @id @default(uuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String    @id @default(uuid())
  userId         String
  conversationId String
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?
  isArchived     Boolean   @default(false)

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId]) // no dups
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderId       String
  body           String?
  img            String?
  video          String?
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
}
